name: Terraform CI with Terragrunt

on:
  workflow_dispatch:

jobs:
  terraform:
    name: Terragrunt Deploy
    runs-on: ubuntu-latest
    env:
      GOOGLE_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
      GOOGLE_REGION: ${{ secrets.GCP_REGION }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set gcloud project and region
        run: |
          gcloud config set project $GOOGLE_PROJECT
          gcloud config set compute/region $GOOGLE_REGION

      - name: Enable required GCP APIs
        run: |
          gcloud services enable \
            compute.googleapis.com \
            container.googleapis.com \
            servicenetworking.googleapis.com \
            dns.googleapis.com \
            iam.googleapis.com \
            cloudresourcemanager.googleapis.com

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Install Terragrunt
        run: |
          TG_VERSION="0.84.1"
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v${TG_VERSION}/terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          sudo chmod +x /usr/local/bin/terragrunt

      - name: Terragrunt Apply - Network
        run: terragrunt apply --auto-approve --non-interactive --working-dir=live/dev/network

      - name: Wait for subnet to exist and be READY
        run: |
         SUBNET_NAME=$(terragrunt output -raw subnet_name --working-dir=live/dev/network)
         echo "Checking subnet: $SUBNET_NAME"

         RETRIES=40
         while true; do
         STATUS=$(gcloud compute networks subnets describe "$SUBNET_NAME" \
          --region="$GOOGLE_REGION" \
          --project="$GOOGLE_PROJECT" \
          --format="get(status)" 2>/dev/null || echo "MISSING")

         if [ "$STATUS" = "READY" ]; then
         echo "✅ Subnet is READY"
         break
         elif [ "$STATUS" != "MISSING" ]; then
         echo "⏳ Subnet exists but status is: $STATUS"
         else
         echo "⏳ Subnet not found yet..."
         fi

         sleep 15
         RETRIES=$((RETRIES-1))
         if [ $RETRIES -eq 0 ]; then
         echo "❌ Subnet not ready after waiting"
         exit 1
         fi
         done

      - name: Terragrunt Apply - Firewall
        run: terragrunt apply --auto-approve --non-interactive --working-dir=live/dev/firewall

      - name: Terragrunt Apply - GKE Cluster
        run: terragrunt apply --auto-approve --non-interactive --working-dir=live/dev/gke-cluster
