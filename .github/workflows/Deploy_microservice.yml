name: Deploy Microservice to GKE

on:
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
  STATIC_IP_NAME: ${{ secrets.GKE_STATIC_IP_NAME }}
  STATIC_IP_REGION: ${{ secrets.GKE_STATIC_IP_REGION }}
  RELEASE_NAME: microservice
  NAMESPACE: default

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Authenticate to GCP
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      # 3. Set up gcloud SDK
      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      # 4. Install GKE gcloud auth plugin
      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin --quiet
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      # 5. Debug: Verify secrets & env variables
      - name: Debug environment values
        run: |
          echo "üîπ PROJECT_ID: $PROJECT_ID"
          echo "üîπ CLUSTER_NAME: $CLUSTER_NAME"
          echo "üîπ STATIC_IP_NAME: $STATIC_IP_NAME"
          echo "üîπ STATIC_IP_REGION: $STATIC_IP_REGION"

      # 6. Debug: list clusters visible to the SA
      - name: List GKE clusters (debug)
        run: |
          echo "üîç Listing clusters in project $PROJECT_ID"
          gcloud container clusters list --project "$PROJECT_ID" || true

      # 7. Auto-detect cluster location & get credentials
      - name: Auto-detect cluster & get credentials
        run: |
          echo "‚è≥ Looking for cluster $CLUSTER_NAME in project $PROJECT_ID..."
          CLUSTER_INFO=$(gcloud container clusters list \
            --project "$PROJECT_ID" \
            --filter="name=$CLUSTER_NAME" \
            --format="value(name,location)")
          if [ -z "$CLUSTER_INFO" ]; then
            echo "‚ùå ERROR: Cluster '$CLUSTER_NAME' not found in project '$PROJECT_ID'"
            exit 1
          fi
          CLUSTER_LOCATION=$(echo "$CLUSTER_INFO" | awk '{print $2}')
          echo "‚úÖ Found cluster '$CLUSTER_NAME' in '$CLUSTER_LOCATION'"
          gcloud container clusters get-credentials "$CLUSTER_NAME" \
            --region "$CLUSTER_LOCATION" \
            --project "$PROJECT_ID"

      # 8. Get Static IP Address
      - name: Get Static IP Address
        id: get-ip
        run: |
          echo "‚è≥ Fetching static IP $STATIC_IP_NAME in region $STATIC_IP_REGION"
          IP_ADDRESS=$(gcloud compute addresses describe "$STATIC_IP_NAME" \
            --region "$STATIC_IP_REGION" \
            --format="value(address)")
          if [ -z "$IP_ADDRESS" ]; then
            echo "‚ùå ERROR: Static IP $STATIC_IP_NAME not found in $STATIC_IP_REGION"
            exit 1
          fi
          echo "STATIC_IP=$IP_ADDRESS" >> $GITHUB_ENV
          echo "‚úÖ Using Static IP: $IP_ADDRESS"

      # 9. Setup kubectl and Helm
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
      - name: Set up Helm
        uses: azure/setup-helm@v4

      # 10. Deploy ingress-nginx with static IP
      - name: Install ingress-nginx with static IP
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.service.loadBalancerIP=${STATIC_IP} \
            --set controller.service.annotations."networking\.gke\.io/load-balancer-type"="External"

      # 11. Wait for ingress-nginx to be ready
      - name: Wait for ingress-nginx
        run: |
          echo "‚è≥ Waiting for ingress-nginx to be ready..."
          kubectl rollout status deployment/ingress-nginx-controller \
            -n ingress-nginx --timeout=180s

      # 12. Deploy Microservice via Helm
      - name: Deploy Microservice via Helm
        run: |
          helm upgrade --install "$RELEASE_NAME" ./helm/microservice \
            --namespace "$NAMESPACE" \
            --create-namespace \
            --set ingress.enabled=true \
            --set ingress.className=nginx \
            --set ingress.hosts[0].host="${STATIC_IP}.nip.io" \
            --set ingress.hosts[0].paths[0].path="/" \
            --set ingress.hosts[0].paths[0].pathType=Prefix

      # 13. Verify deployment
      - name: Verify Deployment
        run: |
          echo "‚è≥ Waiting for pods to be ready..."
          kubectl rollout status deployment/"$RELEASE_NAME" -n "$NAMESPACE" --timeout=180s
          echo "üìú Listing resources:"
          kubectl get pods,svc,ingress -n "$NAMESPACE"
          echo "üåê Test URL: http://${STATIC_IP}.nip.io"

