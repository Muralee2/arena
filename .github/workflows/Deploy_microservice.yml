name: Deploy Microservice to GKE

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}
  CLUSTER_LOCATION: ${{ secrets.GCP_REGION }}
  STATIC_IP_NAME: ${{ secrets.GCP_STATIC_IP_NAME }}
  SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SA_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Get GKE credentials
        run: |
          echo "Fetching GKE credentials..."
          gcloud container clusters get-credentials "$CLUSTER_NAME" \
            --region "$CLUSTER_LOCATION" \
            --project "$PROJECT_ID"

      - name: Validate static IP & fetch its address
        run: |
          echo "Validating static IP $STATIC_IP_NAME in region $CLUSTER_LOCATION"
          export STATIC_IP=$(gcloud compute addresses describe "$STATIC_IP_NAME" \
            --region "$CLUSTER_LOCATION" \
            --project "$PROJECT_ID" \
            --format="value(address)")
          if [ -z "$STATIC_IP" ]; then
            echo "❌ Static IP $STATIC_IP_NAME not found in region $CLUSTER_LOCATION"
            exit 1
          fi
          echo "STATIC_IP=$STATIC_IP" >> $GITHUB_ENV
          echo "✅ Using static IP: $STATIC_IP"

      - name: Check Cluster VPC & Subnet
        run: |
          echo "Checking cluster network configuration..."
          gcloud container clusters describe "$CLUSTER_NAME" \
            --region "$CLUSTER_LOCATION" \
            --project "$PROJECT_ID" \
            --format="value(networkConfig.network,networkConfig.subnetwork)"

      - name: Ensure Firewall Rules for LB Health Checks
        run: |
          VPC_NAME=$(gcloud container clusters describe "$CLUSTER_NAME" \
            --region "$CLUSTER_LOCATION" \
            --project "$PROJECT_ID" \
            --format="value(networkConfig.network)")
          echo "Detected VPC: $VPC_NAME"
          gcloud compute firewall-rules create allow-gke-lb-healthcheck \
            --network $VPC_NAME \
            --allow tcp:80,tcp:443,tcp:10256 \
            --source-ranges 35.191.0.0/16,130.211.0.0/22 \
            --project "$PROJECT_ID" || true

      - name: Install ingress-nginx with static IP
        run: |
          echo "Installing ingress-nginx using Helm..."
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.service.loadBalancerIP=${STATIC_IP} \
            --set controller.service.annotations."networking\.gke\.io/load-balancer-type"="External" \
            --set controller.publishService.enabled=true \
            --wait --timeout 10m0s

      - name: Deploy microservice using Helm
        run: |
          echo "Deploying microservice..."
          helm upgrade --install microservice ./helm/microservice \
            --namespace microservice \
            --create-namespace \
            --wait --timeout 10m0s

      - name: Debug on Failure
        if: failure()
        run: |
          echo "❌ Deployment failed. Printing debug logs..."
          kubectl get pods -A -o wide || true
          kubectl describe svc ingress-nginx-controller -n ingress-nginx || true
          kubectl describe pod -n ingress-nginx | tail -n 50 || true
          kubectl get events -A --sort-by=.metadata.creationTimestamp | tail -n 50 || true

      - name: Deployment Success
        if: success()
        run: |
          echo "✅ Deployment completed successfully!"
          echo "Access your service via: http://${STATIC_IP}"

